{"ast":null,"code":"import _regeneratorRuntime from \"/usr/src/app/workplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/usr/src/app/workplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/usr/src/app/workplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/src/app/workplace/src/EventEntry.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { firebaseApp } from \"./config/firebase\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { TextField } from \"@material-ui/core\";\nimport \"./EventEntry.css\";\nconst firebaseDb = firebaseApp.database();\n\nconst EventEntry = props => {\n  // 1-1.入力フォームの内容をstateに反映しよう\n  // イベント名\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        eventName = _useState2[0],\n        setEventName = _useState2[1]; // 説明\n\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        description = _useState4[0],\n        setDescription = _useState4[1]; // イベント候補日\n\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        possibleDateText = _useState6[0],\n        setPossibleDateText = _useState6[1]; // \"イベントを作る\"ボタンを押すとregisterEvent関数が起動します。\n\n\n  const registerEvent = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var possibleDates, eventData, eventId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            possibleDates = possibleDateText.split(\"\\n\"); // 1-3-1.入力した値を整形しよう\n\n            eventData = {\n              name: eventName,\n              description: description,\n              dates: possibleDates\n            }; // 1-3-2.Realtime Databaseに整形した値を書き込もう\n\n            firebaseDb.ref(\"events\").push(eventData); // 1-4.イベントIDを取得して画面遷移しよう\n\n            eventId = firebaseDb.ref(\"events\").push(eventData).key;\n            console.log(eventId);\n            props.history.push(\"/event/\".concat(eventId));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function registerEvent() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    id: \"event-entry\",\n    container: true,\n    item: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"flex-start\",\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 5,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guide-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    color: \"primary\",\n    label: \"1\",\n    className: \"guide-title__chip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }), \"\\u30A4\\u30D9\\u30F3\\u30C8\\u6982\\u8981\\u3092\\u5165\\u529B\\u3057\\u307E\\u3057\\u3087\\u3046\"), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u30A4\\u30D9\\u30F3\\u30C8\\u540D\" //1-1入力された値をstateで管理しましょう\n    ,\n    onChange: evt => setEventName(evt.target.value) // 1-2.入力フォームの内容をstateから取得して表示しよう\n    ,\n    value: eventName,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u8AAC\\u660E\" //1-1入力された値をstateで管理しましょう\n    ,\n    onChange: evt => setDescription(evt.target.value) // 1-2.入力フォームの内容をstateから取得して表示しよう\n    ,\n    value: description,\n    margin: \"normal\",\n    multiline: true,\n    rows: 7,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 5,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guide-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    color: \"primary\",\n    label: \"2\",\n    className: \"guide-title__chip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), \"\\u30A4\\u30D9\\u30F3\\u30C8\\u5019\\u88DC\\u65E5\\u3092\\u5165\\u529B\\u3057\\u307E\\u3057\\u3087\\u3046\"), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u4F8B\\uFF1A12/4 18:00~\",\n    value: possibleDateText,\n    onChange: evt => setPossibleDateText(evt.target.value),\n    className: \"Guide-title\",\n    multiline: true,\n    rows: 7,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"flex-end\",\n    className: \"button-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => registerEvent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"\\u30A4\\u30D9\\u30F3\\u30C8\\u3092\\u4F5C\\u308B\"))));\n};\n\nexport default withRouter(EventEntry);","map":{"version":3,"sources":["/usr/src/app/workplace/src/EventEntry.js"],"names":["React","useState","withRouter","firebaseApp","Grid","Button","Chip","TextField","firebaseDb","database","EventEntry","props","eventName","setEventName","description","setDescription","possibleDateText","setPossibleDateText","registerEvent","possibleDates","split","eventData","name","dates","ref","push","eventId","key","console","log","history","evt","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { firebaseApp } from \"./config/firebase\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { TextField } from \"@material-ui/core\";\n\nimport \"./EventEntry.css\";\n\nconst firebaseDb = firebaseApp.database();\n\nconst EventEntry = (props) => {\n  // 1-1.入力フォームの内容をstateに反映しよう\n  // イベント名\n  const [eventName, setEventName] = useState(\"\");\n  // 説明\n  const [description, setDescription] = useState(\"\");\n  // イベント候補日\n  const [possibleDateText, setPossibleDateText] = useState(\"\");\n\n  // \"イベントを作る\"ボタンを押すとregisterEvent関数が起動します。\n  const registerEvent = async () => {\n    const possibleDates = possibleDateText.split(\"\\n\");\n    // 1-3-1.入力した値を整形しよう\n    const eventData = {\n      name: eventName,\n      description: description,\n      dates: possibleDates,\n    };\n    // 1-3-2.Realtime Databaseに整形した値を書き込もう\n    firebaseDb.ref(\"events\").push(eventData);\n    // 1-4.イベントIDを取得して画面遷移しよう\n    const eventId = firebaseDb.ref(\"events\").push(eventData).key;\n    console.log(eventId);\n    props.history.push(`/event/${eventId}`);\n  };\n\n  return (\n    <Grid\n      id=\"event-entry\"\n      container\n      item\n      direction=\"row\"\n      justify=\"space-between\"\n      alignItems=\"flex-start\"\n      xs={9}\n    >\n      <Grid container item xs={5} justify=\"flex-start\">\n        <div className=\"guide-title\">\n          <Chip color=\"primary\" label=\"1\" className=\"guide-title__chip\" />\n          イベント概要を入力しましょう\n        </div>\n        <TextField\n          placeholder=\"イベント名\"\n          //1-1入力された値をstateで管理しましょう\n          onChange={(evt) => setEventName(evt.target.value)}\n          // 1-2.入力フォームの内容をstateから取得して表示しよう\n          value={eventName}\n          fullWidth={true}\n          variant=\"outlined\"\n        />\n        <TextField\n          placeholder=\"説明\"\n          //1-1入力された値をstateで管理しましょう\n          onChange={(evt) => setDescription(evt.target.value)}\n          // 1-2.入力フォームの内容をstateから取得して表示しよう\n          value={description}\n          margin=\"normal\"\n          multiline\n          rows={7}\n          fullWidth={true}\n          variant=\"outlined\"\n        />\n      </Grid>\n      <Grid container item xs={5} justify=\"flex-start\">\n        <div className=\"guide-title\">\n          <Chip color=\"primary\" label=\"2\" className=\"guide-title__chip\" />\n          イベント候補日を入力しましょう\n        </div>\n        <TextField\n          placeholder=\"例：12/4 18:00~\"\n          value={possibleDateText}\n          onChange={(evt) => setPossibleDateText(evt.target.value)}\n          className=\"Guide-title\"\n          multiline\n          rows={7}\n          fullWidth={true}\n          variant=\"outlined\"\n        />\n      </Grid>\n      <Grid container item xs={12} justify=\"flex-end\" className=\"button-area\">\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => registerEvent()}\n          >\n            イベントを作る\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withRouter(EventEntry);\n"]},"metadata":{},"sourceType":"module"}