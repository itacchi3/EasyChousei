{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/workplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/src/app/workplace/src/EventEntry.js\";\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { firebaseApp } from './config/firebase';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport { TextField } from '@material-ui/core';\nimport './EventEntry.css';\nconst firebaseDb = firebaseApp.database();\n\nconst EventEntry = props => {\n  // 1-1.入力フォームの内容をstateに反映しよう\n  // イベント候補日\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        possibleDateText = _useState2[0],\n        setPossibleDateText = _useState2[1]; // \"イベントを作る\"ボタンを押すとregisterEvent関数が起動します。\n\n\n  const registerEvent = () => {\n    const possibleDates = possibleDateText.split('\\n'); // 1-3-1.入力した値を整形しよう\n    // 1-3-2.Realtime Databaseに整形した値を書き込もう\n    // 1-4.イベントIDを取得して画面遷移しよう\n    // props.history.push(`/event/${eventId}`);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    id: \"event-entry\",\n    container: true,\n    item: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"flex-start\",\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 5,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guide-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    color: \"primary\",\n    label: \"1\",\n    className: \"guide-title__chip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }), \"\\u30A4\\u30D9\\u30F3\\u30C8\\u6982\\u8981\\u3092\\u5165\\u529B\\u3057\\u307E\\u3057\\u3087\\u3046\"), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u30A4\\u30D9\\u30F3\\u30C8\\u540D\" //1-1入力された値をstateで管理しましょう\n    // 1-2.入力フォームの内容をstateから取得して表示しよう\n    ,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u8AAC\\u660E\" //1-1入力された値をstateで管理しましょう\n    // 1-2.入力フォームの内容をstateから取得して表示しよう\n    ,\n    margin: \"normal\",\n    multiline: true,\n    rows: 7,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 5,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guide-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    color: \"primary\",\n    label: \"2\",\n    className: \"guide-title__chip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }), \"\\u30A4\\u30D9\\u30F3\\u30C8\\u5019\\u88DC\\u65E5\\u3092\\u5165\\u529B\\u3057\\u307E\\u3057\\u3087\\u3046\"), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"\\u4F8B\\uFF1A12/4 18:00~\",\n    value: possibleDateText,\n    onChange: evt => setPossibleDateText(evt.target.value),\n    className: \"Guide-title\",\n    multiline: true,\n    rows: 7,\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"flex-end\",\n    className: \"button-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => registerEvent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"\\u30A4\\u30D9\\u30F3\\u30C8\\u3092\\u4F5C\\u308B\"))));\n};\n\nexport default withRouter(EventEntry);","map":{"version":3,"sources":["/usr/src/app/workplace/src/EventEntry.js"],"names":["React","useState","withRouter","firebaseApp","Grid","Button","Chip","TextField","firebaseDb","database","EventEntry","props","possibleDateText","setPossibleDateText","registerEvent","possibleDates","split","evt","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { firebaseApp } from './config/firebase'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport { TextField } from '@material-ui/core';\n\nimport './EventEntry.css';\n\nconst firebaseDb = firebaseApp.database();\n\nconst EventEntry = (props) => {\n    // 1-1.入力フォームの内容をstateに反映しよう\n\n    // イベント候補日\n    const [possibleDateText, setPossibleDateText] = useState('')\n\n    // \"イベントを作る\"ボタンを押すとregisterEvent関数が起動します。\n    const registerEvent = () => {\n        const possibleDates = possibleDateText.split('\\n')\n        // 1-3-1.入力した値を整形しよう\n\n        // 1-3-2.Realtime Databaseに整形した値を書き込もう\n\n        // 1-4.イベントIDを取得して画面遷移しよう\n\n        // props.history.push(`/event/${eventId}`);\n\n    };\n\n\n    return (\n        <Grid\n            id=\"event-entry\"\n            container\n            item\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"flex-start\"\n            xs={9}\n            >\n                <Grid container item xs={5} justify=\"flex-start\">\n                    <div className=\"guide-title\">\n                        <Chip color=\"primary\" label=\"1\" className=\"guide-title__chip\"/>\n                        イベント概要を入力しましょう\n                    </div>\n                    <TextField\n                    placeholder=\"イベント名\"\n                    //1-1入力された値をstateで管理しましょう\n\n                    // 1-2.入力フォームの内容をstateから取得して表示しよう\n\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    />\n                    <TextField\n                    placeholder=\"説明\"\n                    //1-1入力された値をstateで管理しましょう\n\n                    // 1-2.入力フォームの内容をstateから取得して表示しよう\n\n                    margin=\"normal\"\n                    multiline\n                    rows={7}\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid container item xs={5} justify=\"flex-start\">\n                    <div className=\"guide-title\">\n                        <Chip color=\"primary\" label=\"2\" className=\"guide-title__chip\"/>\n                        イベント候補日を入力しましょう\n                    </div>\n                    <TextField\n                    placeholder=\"例：12/4 18:00~\"\n                    value={possibleDateText}\n                    onChange={evt => setPossibleDateText(evt.target.value)}\n\n                    className=\"Guide-title\"\n                    multiline\n                    rows={7}\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid container item xs={12} justify=\"flex-end\" className=\"button-area\">\n                    <Grid item>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => registerEvent()}>\n                            イベントを作る\n                        </Button>\n                    </Grid>\n                </Grid>\n        </Grid>\n    );\n}\n\nexport default withRouter(EventEntry);\n"]},"metadata":{},"sourceType":"module"}